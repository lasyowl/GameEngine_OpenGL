#version 430 core

#define TYPE_LAUNCHER 0.0f
#define TYPE_SHELL 1.0f
#define TYPE_REGULAR 2.0f
#define TYPE_DESTROY 3.0f

struct Info{
	vec4 type;
	vec4 vertex;
	vec4 velocity;
	vec4 timeRemain;
	vec4 particleNum;
};

layout(local_size_x = 1, local_size_y = 1) in;

layout(std430, binding = 0) buffer SSBO {
	Info info[];
};

uniform int particle_size;
uniform sampler1D texture_random;
uniform vec4 gravity = vec4(0,-0.00001f,0,0);

vec3 random(float randSeed) {
	return texture(texture_random, randSeed).xyz;
}

void main() {

	uvec3 numVertex = gl_NumWorkGroups * gl_WorkGroupSize;
	uint index = gl_GlobalInvocationID.y * numVertex.x + gl_GlobalInvocationID.x;
	
	float randSeed = float(index) / particle_size;
	vec3 randTex = random(randSeed);
	vec3 randTex_norm = normalize(randTex - vec3(0.5f, 0.5f, 0.5f));

	if(info[index].type.x == TYPE_REGULAR) {
		if(info[index].timeRemain.x > 0.0f) {
			info[index].vertex += info[index].velocity + gravity;
			info[index].velocity = 0.98 * info[index].velocity + gravity;
			info[index].timeRemain.x -= 0.9f;
		}
		else {
			info[index].type.x = TYPE_DESTROY;
		}
	}
	else if(info[index].type.x == TYPE_SHELL) {
		info[index].velocity = vec4(0.01 * randTex_norm, 0.0f);
		info[index].vertex = info[0].vertex;
		info[index].type.x = TYPE_REGULAR;
		info[index].timeRemain.x = 100.0f;
	}
	else if(info[index].type.x == TYPE_LAUNCHER) {
		if(info[index].timeRemain.x < 10.0f)
			info[index].type.x = TYPE_DESTROY;
		info[index].timeRemain.x -= 1.0f;
	}
}